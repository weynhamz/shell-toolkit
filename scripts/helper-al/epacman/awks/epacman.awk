#!/usr/bin/igawk -f
#
# File name: epacman.awk
#
# Usage:
#
#     epacman.awk [-t] (([-g] [-l]) [-D] [-R]) <filename>
#     epacman.awk [-t] (([-g] [-l]) [-D] [-R]) < <inputstream>
#
#     Filename or Inputstream must be the result generated by
#     'pacman -Q' in ASCII.
#
# Options:
#
#     -t  Debug mode
#     -g  List packages group
#     -l  List packages not in any group
#     -D  List packages dependency
#     -R  List packages requirements

@include awks/common.awk
@include /usr/share/awk/getopt.awk

BEGIN {
    FS = ":";
    #Process the args
    while((c = getopt(ARGC, ARGV, "tlgDR")) != -1)
    {
        switch (c) {
        case "t":
            debug=1;
            continue
        case "l":
            show_list=1;
            continue
        case "g":
            show_group=1;
            continue
        case "D":
            show_depend=1;
            continue
        case "R":
            show_require=1;
            continue
        }
    }
    #Clear out options, in case
    #of being used as filenames
    for(i=1;i<Optind;i++){
        delete ARGV[i]
    }
}

{
    if(length($0) == 0) {
        if(groups != "None")
        {
            if(show_group) {
                split(groups,buffer,"  ");
                asort(buffer);
                for(i=1;i<=size(buffer);i++)
                {
                    group = buffer[i];
                    ggroups[group] = group;
                    egroups[group,name] = name;
                }
            } else {
                left[name] = name # "[Groups:" groups "]"
            }
        }
        else
        {
            left[name]=name;
        }
        if(requireby != "None")
        {
            split(requireby,requirebys," ");
            asort(requirebys);
            for(i=1;i<=size(requirebys);i++) {
                require=requirebys[i];
                requires[name,require]=require;
            }
        }
        if(dependson != "None")
        {
            split(dependson,dependsons," ");
            asort(dependsons);
            for(i=1;i<=size(dependsons);i++){
                depend=dependsons[i];
                depends[name,depend]=depend;
            }
        }
    } else {
        gsub(/^[ ]+/,"",$1);
        gsub(/[ ]+$/,"",$1);
        gsub(/[ ]+$/,"",$2);
        gsub(/^[ ]+/,"",$2);
        if($1 == "Name")
        {
            name = $2;
        }
        else if($1 == "Groups")
        {
            groups = $2;
        }
        else if($1 == "Depends On")
        {
            dependson = $2;
        }
        else if($1 == "Required By")
        {
            requireby = $2;
        }
        else if($1 == "Description")
        {
            description = $2;
        }
        else if($1 == "Install Reason")
        {
            installreason = $2;
        }
    }
}

END {
    if(debug) {
        asort(left);
        for(i=1;i<=size(left);i++) {
            count = 0;
            for (item in requires) {
                split(item,items,"\034");
                if(left[i] == items[1])
                {
                    count++;
                }
            }
            if (count == 0) printf("%d:%s\n",i,left[i]);
        }
    }
    if(show_list) {
        asort(left);
        for(i=1;i<=size(left);i++) {
            printf("%d:%s\n",i,left[i]);
            if (show_depend)
            {
                for (item in depends) {
                    split(item,items,"\034");
                    if(left[i] == items[1])
                    {
                        printf("    |== %s\n",items[2]);
                    }
                }
            }
            if (show_require)
            {
                for (item in requires) {
                    split(item,items,"\034");
                    if(left[i] == items[1])
                    {
                        printf("    |** %s\n",items[2]);
                    }
                }
            }
        }
    }
    if(show_group) {
        asort(ggroups);
        for(i=1;i<=size(ggroups);i++){
            printf("%s\n",ggroups[i]);
            for(item in egroups) {
                split(item,items,"\034");
                if ( ggroups[i] == items[1]) {
                    package = items[2];
                    temp[package] = package;
                }
            }
            asort(temp);
            for(j=1;j<=size(temp);j++) {
                printf("  |-- %s\n",temp[j]);
                if (show_depend)
                {
                    for (item in depends) {
                        split(item,items,"\034");
                        if(temp[j] == items[1])
                        {
                            printf("  |  |== %s\n",items[2]);
                        }
                    }
                }
                if (show_require)
                {
                    for (item in requires) {
                        split(item,items,"\034");
                        if(temp[j] == items[1])
                        {
                            printf("  |  |** %s\n",items[2]);
                        }
                    }
                }
            }
            delete temp;
            printf("\n");
        }
    }
}
